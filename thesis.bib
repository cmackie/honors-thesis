@Misc{JDK8UnsignedIntegerArithmetic2012,
  author =    "Joseph D. Darcy",
  title =     "Unsigned Integer Arithmetic {API} now in {JDK} 8",
  howpublished = "\url{https://blogs.oracle.com/darcy/entry/unsigned_api}",
  month =     jan,
  year =      2012,
}

@InProceedings{PapiACPE2008,
  author = 	 "Matthew M. Papi and Mahmood Ali and Telmo Luis {Correa~Jr.} and Jeff H. Perkins and Michael D. Ernst",
  title = 	 "Practical pluggable types for {Java}",
  crossref =     "ISSTA2008",
  pages = 	 "201--212",
  abstract =
   "This paper introduces the Checker Framework, which supports adding
    pluggable type systems to the Java language in a backward-compatible way.
    A type system designer defines type qualifiers and their semantics, and a
    compiler plug-in enforces the semantics.  Programmers can write the type
    qualifiers in their programs and use the plug-in to detect or prevent
    errors.  The Checker Framework is useful both to programmers who wish to
    write error-free code, and to type system designers who wish to evaluate
    and deploy their type systems.
    \par
    The Checker Framework includes new Java syntax for expressing type
    qualifiers; declarative and procedural mechanisms for writing
    type-checking rules; and support for flow-sensitive local type qualifier
    inference and for polymorphism over types and qualifiers.  The Checker
    Framework is well-integrated with the Java language and toolset.
    \par
    We have evaluated the Checker Framework by writing 5 checkers and running
    them on over 600K lines of existing code.  The checkers found real
    errors, then confirmed the absence of further errors in the fixed code.
    The case studies also shed light on the type systems themselves.",
  usesDaikonAsTestSubject = 1,
  basefilename = "pluggable-checkers-issta2008",
  downloads =
   "http://homes.cs.washington.edu/~mernst/pubs/pluggable-types-issta2008-slides.pdf talk slides (PDF);
    http://homes.cs.washington.edu/~mernst/pubs/pluggable-types-demo-slides.pdf demo slides (PDF);
    http://pag.csail.mit.edu/pubs/pluggable-checkers-papi-mengthesis.pdf Papi thesis (PDF);
    https://checkerframework.org/ Checker Framework implementation",
  downloadsnonlocal =
   "http://homes.cs.washington.edu/~mernst/pubs/pluggable-checkers-issta2008.pdf PDF",
  category = "Programming language design",
  csetags = "mernst,mernst-Programming-language-design,plse",
  summary =
   "We have created a framework for pluggable type-checking in Java (including
    backward-compatible syntax).  Checkers built with the
    framework found real errors in existing software.",
  undergradCoauthor = 1,
}

@InProceedings{DietlDEMS2011,
  author = 	 "Werner Dietl and Stephanie Dietzel and Michael D. Ernst and K{\i}van{\c{c}} Mu{\c{s}}lu and Todd Schiller",
  authorASCII = 	 "Werner Dietl and Stephanie Dietzel and Michael D. Ernst and Kivanc Muslu and Todd Schiller",
  title = 	 "Building and using pluggable type-checkers",
  crossref =     "ICSE2011",
  pages = 	 "681--690",
  abstract =
   "This paper describes practical experience building and using pluggable
    type-checkers.  A pluggable type-checker refines (strengthens) the
    built-in type system of a programming language.  This permits programmers
    to detect and prevent, at compile time, defects that would otherwise have
    been manifested as run-time errors.  The prevented defects may be
    generally applicable to all programs, such as null pointer dereferences.
    Or, an application-specific pluggable type system may be designed for a
    single application.
    \par
    We built a series of pluggable type checkers using the Checker Framework,
    and evaluated them on 2 million lines of code, finding hundreds of bugs
    in the process.  We also observed 28 first-year computer science students
    use a checker to eliminate null pointer errors in their course projects.
    \par
    Along with describing the checkers and characterizing the bugs we found,
    we report the insights we had throughout the process.  Overall, we found
    that the type checkers were easy to write, easy for novices to
    productively use, and effective in finding real bugs and verifying
    program properties, even for widely tested and used open source projects.",
  basefilename = "pluggable-checkers-icse2011",
  downloadsnonlocal =
   "http://homes.cs.washington.edu/~mernst/pubs/pluggable-checkers-icse2011.pdf PDF;
    http://homes.cs.washington.edu/~mernst/pubs/pluggable-checkers-icse2011-slides.pdf slides (PDF)",
  downloads =
    "https://checkerframework.org/ implementation",
  usesDaikonAsTestSubject = 1,
  category = "Programming language design",
  csetags = "wmd,sdietzel,mernst,kinanc,tws,mernst-Programming-language-design,plse",
  summary =
   "This paper evaluates the ease of pluggable type-checking with the Checker
    Framework.  The type checkers were easy to write, easy for novices to
    use, and effective in finding hundreds of errors in case studies of 2
    million lines of code.",
  undergradCoauthor = 1,
}


@Misc{JSR308-PFD,
  author = 	 "{JSR 308 Expert Group}",
  pseudoauthor = "Michael D. Ernst",
  title = 	 "Annotations on {Java} types",
  howpublished = "\url{http://download.oracle.com/otndocs/jcp/annotations-2014_01_08-pfd-spec/}",
  month = 	 jan # "~8,",
  year = 	 2014,
  note = 	 "Proposed Final Draft.",
  NOabstract =   1,
  basefilename = "annotations-jsr308-pfd",
  downloadsnonlocal = "http://download.oracle.com/otndocs/jcp/annotations-2014_01_08-pfd-spec/ PDF",
  category = "Programming language design",
  csetags = "mernst,mernst-Programming-language-design,plse",
  summary =
   "This is the Proposed Final Draft of the specification of type
   annotations in Jana 8.",
}

@InProceedings{MolnarLW2009,
  author =       "Molnar, David and Li, Xue Cong and Wagner, David A.",
  title =        "Dynamic test generation to find integer bugs in x86 binary {Linux} programs",
  crossref =     "USENIXSec2009",
  pages =     "67-82"
}

@InProceedings{GuoPME2006,
  author = 	 "Philip J. Guo and Jeff H. Perkins and Stephen McCamant
                  and Michael D. Ernst",
  title = 	 "Dynamic inference of abstract types",
  crossref =     "ISSTA2006",
  pages = 	 "255--265",
  abstract =
   "An abstract type groups variables that are used for related purposes
    in a program.  We describe a dynamic unification-based analysis for
    inferring abstract types.  Initially, each run-time value gets a
    unique abstract type.  A run-time interaction among values indicates
    that they have the same abstract type, so their abstract types are
    unified.  Also at run time, abstract types for variables are
    accumulated from abstract types for values.  The notion of interaction
    may be customized, permitting the analysis to compute finer or coarser
    abstract types; these different notions of abstract type are useful
    for different tasks.  We have implemented the analysis for compiled
    x86 binaries and for Java bytecodes.  Our experiments indicate that
    the inferred abstract types are useful for program comprehension,
    improve both the results and the run time of a follow-on program
    analysis, and are more precise than the output of a comparable static
    analysis, without suffering from overfitting.",
  basefilename = "abstract-type-issta2006",
  downloads = "http://plse.cs.washington.edu/daikon/ DynComp implementation (distributed as part of Daikon)",
  downloadsnonlocal =
    "http://homes.cs.washington.edu/~mernst/pubs/abstract-type-issta2006.pdf PDF",
  category = "Dynamic analysis",
  csetags = "mernst,mernst-Dynamic-analysis,plse",
  summary =
   "This paper presents a dynamic analysis for computing abstract types,
    which indicate which values and variables may interact at run time.
    The paper also presents implementations and experiments for C++ and Java.",
  undergradCoauthor = 1,
}

@TechReport{MolnarW2007,
  author =       "David Alexander Molnar and David Wagner",
  title =        "Catchconv: Symbolic execution and run-time type inference for integer conversion errors",
  institution =  "EECS, UC Berkeley",
  year =         2007,
  number =    "UCB/EECS-2007-23",
  address =   "Berkeley, CA, USA",
  month =     feb,
}

@Manual{ValueChecker,
  title =     "Constant Value Checker",
  howpublished = "\url{https://checkerframework.org/manual/#constant-value-checker}",
  month =     may,
  year =      2017,
}

@Misc{Jake2,
  title =     "jake2",
  howpublished = "\url{https://github.com/mbien/jake2}",
  month =     dec,
  year =      2009,
}